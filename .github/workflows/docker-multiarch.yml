name: Build and Push Multi-Arch Docker Image

on:
  release:
    types: [published]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  VERSION: ${{ github.event.release.tag_name }}
  
jobs:
  # Build for ARM (on QEMU ARM)
  build-arm-linux:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU for ARM
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          outputs: type=image,name=${{ env.IMAGE_NAME }}:arm64-${{ env.VERSION }},push=true
          
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # Build for AMD (on QEMU AMD)
  build-amd64-linux:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU for AMD64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          outputs: type=image,name=${{ env.IMAGE_NAME }}:amd64-${{ env.VERSION }},push=true
            
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # Create the Multi-Arch Manifest
  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-arm-linux, build-amd64-linux]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create and push multi-arch manifest
        run: |
          # Create manifest for latest
          docker manifest create ${{ env.IMAGE_NAME }}:latest \
            --amend ${{ env.IMAGE_NAME }}:amd64-${{ env.VERSION }} \
            --amend ${{ env.IMAGE_NAME }}:arm64-${{ env.VERSION }}
          docker manifest push ${{ env.IMAGE_NAME }}:latest

          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            --amend ${{ env.IMAGE_NAME }}:amd64-${{ env.VERSION }} \
            --amend ${{ env.IMAGE_NAME }}:arm64-${{ env.VERSION }}
          docker manifest push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}


